#include <stdio.h>
#include <stdlib.h>

#define M 3

typedef struct node {
    int n;
    int keys[M - 1];
    struct node *p[M];
} node;

node *root = NULL;

void insert(int key);
void split(node *x, int i);
void insert_non_full(node *x, int key);
void traverse(node *x);

int main() {
    int n, i, key;
    printf("Enter the number of keys to insert: ");
    scanf("%d", &n);
    printf("Enter the keys to insert: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &key);
        insert(key);
    }
    printf("The B-Tree is: ");
    traverse(root);
    return 0;
}

void insert(int key) {
    if (root == NULL) {
        root = (node *)malloc(sizeof(node));
        root->n = 1;
        root->keys[0] = key;
        int i;
        for (i = 0; i < M; i++) {
            root->p[i] = NULL;
        }
    } else {
        if (root->n == M - 1) {
            node *s = (node *)malloc(sizeof(node));
            s->n = 0;
            s->p[0] = root;
            root = s;
            split(s, 0);
            insert_non_full(s, key);
        } else {
            insert_non_full(root, key);
        }
    }
}

void split(node *x, int i) {
    node *z = (node *)malloc(sizeof(node));
    node *y = x->p[i];
    z->n = M / 2 - 1;
    int j;
    for (j = 0; j < M / 2 - 1; j++) {
        z->keys[j] = y->keys[j + M / 2];
    }
    if (y->p[0] != NULL) {
        int k;
        for (k = 0; k < M / 2; k++) {
            z->p[k] = y->p[k + M / 2];
        }
    }
    y->n = M / 2 - 1;
    int j1;
    for (j1 = x->n; j1 >= i + 1; j1--) {
        x->p[j1 + 1] = x->p[j1];
    }
    x->p[i + 1] = z;
    int j2;
    for (j2 = x->n - 1; j2 >= i; j2--) {
        x->keys[j2 + 1] = x->keys[j2];
    }
    x->keys[i] = y->keys[M / 2 - 1];
    x->n = x->n + 1;
}

void insert_non_full(node *x, int key) {
    int i = x->n - 1;
    if (x->p[0] == NULL) {
        while (i >= 0 && key < x->keys[i]) {
            x->keys[i + 1] = x->keys[i];
            i--;
        }
        x->keys[i + 1] = key;
        x->n = x->n + 1;
    } else {
        while (i >= 0 && key < x->keys[i]) {
            i--;
        }
        i++;
        if (x->p[i]->n == M - 1) {
            split(x, i);
            if (key > x->keys[i]) {
                i++;
            }
        }
        insert_non_full(x->p[i], key);
    }
}

void traverse(node *x) {
    int i;
    for (i = 0; i < x->n; i++) {
        printf("%d ", x->keys[i]);
    }
    if (x->p[0] != NULL) {
        for (i = 0; i <= x->n; i++) {
            traverse(x->p[i]);
        }
    }
}
